local CoreGui = game:GetService("CoreGui")
local tbl = {}

for i,v in pairs(CoreGui.GetDescendants(CoreGui)) do
     if v.IsA(v, "ImageLabel") and v.Image:find('rbxasset://') then
            table.insert(tbl, v.Image)
        end
end

local hello;
hello = hookfunction(game:GetService("ContentProvider").PreloadAsync, function(self, ...)
        local Args = {...}
        if not checkcaller() and type(Args[1]) == "table" and table.find(Args[1], CoreGui) then
            Args[1] = tbl
            return hello(self, unpack(Args))
        end
    return hello(self, ...)
end)

local function football(ncm)
     if ncm == "PreloadAsync" or ncm == "preloadAsync" then
          return true
     end
     return false
end

local __namecall;

__namecall = hookmetamethod(game, "__namecall", function(Self, ...)
    local Args = {...}
    local NamecallMethod = getnamecallmethod()
    if not checkcaller() and type(Args[1]) == "table" and table.find(Args[1], CoreGui) and Self == game.GetService(game, "ContentProvider") and football(NamecallMethod) then
        Args[1] = tbl
        return __namecall(Self, unpack(Args))
    end
    return __namecall(Self, ...)
end)

local replicatedStorage = game:GetService("ReplicatedStorage")
local players = game:GetService("Players")
local userInputService = game:GetService("UserInputService")
local player = players.LocalPlayer
local mouse = player:GetMouse()
local runService = game:GetService("RunService")

local tf = Instance.new("Model")
tf.Parent = workspace
if workspace:FindFirstChild("LineDownWall") then
	workspace.LineDownWall.Parent = tf
	workspace.ScrambleWall.Parent = tf
end

mouse.TargetFilter = tf

local function isFootball(fb)
	return fb and fb:FindFirstChildWhichIsA("RemoteEvent")
end

local function getNearestBall(checkFunc)
	local lowestDistance = math.huge
	local lowestFB = nil
	for index, part in pairs(workspace:GetChildren()) do
		if isFootball(part) and not part.Anchored then
			if checkFunc then if not checkFunc(part) then continue end end
			local distance = (player.Character.HumanoidRootPart.Position - part.Position).Magnitude
			if distance < lowestDistance then
				lowestFB = part
				lowestDistance = distance
			end
		end
	end
	return lowestFB, lowestDistance
end

local function getNearestPartToPartFromParts(parts, part)
	local lowestMagnitude = math.huge
	local lowestPart = nil
	for index, p in pairs(parts) do
		local dis = (part.Position - p.Position).Magnitude
		if dis < lowestMagnitude then
			lowestMagnitude = dis
			lowestPart = p
		end
	end
	return lowestPart
end

local function findPower(pos)
	local powerTable = {
		[10] = 55,
		[20] = 60,
		[30] = 65,
		[35] = 70,
		[40] = 75,
		[50] = 80,
		[60] = 85,
		[70] = 90,
		[80] = 95,
	}
	local distance = (player.Character.Head.Position - pos).Magnitude
	local lDiff = math.huge
	local power = 0
	local pdistance = nil
	local reachedDis = 0
	local nextDis = 0
	local naturalPower = 0
	for dis, pwr in pairs(powerTable) do
		dis *= 3
		if distance > dis and dis > reachedDis then
			power = pwr
			naturalPower = pwr
			pdistance = dis
			reachedDis = dis
			if dis == 90 then nextDis = dis + 15 else nextDis = dis + 30 end
		end
	end
	local diff = math.clamp(nextDis - distance, 0, math.huge)
	local required = (nextDis - reachedDis)
	local nextPower = powerTable[nextDis / 3] or 75
	local percentage = diff / required
	--print(diff, required, nextPower, power, percentage, (nextPower - power) - ((nextPower - power) * percentage))
	power += math.clamp((nextPower - power) - ((nextPower - power) * percentage), 0, 100)
	if power ~= power then
		power = 50
	end
	return power, naturalPower
end

local function checkFootballFlying(fb)
	if fb:FindFirstChild("LFbodyf") then
		return fb.LFbodyf.Force.Magnitude > 1
	end
	return false
end

local function beamProjectile(g, v0, x0, t1) -- easy egomoose copy!
	-- calculate the bezier points
	local c = 0.5*0.5*0.5;
	local p3 = 0.5*g*t1*t1 + v0*t1 + x0;
	local p2 = p3 - (g*t1*t1 + v0*t1)/3;
	local p1 = (c*g*t1*t1 + 0.5*v0*t1 + x0 - c*(x0+p3))/(3*c) - p2;

	-- the curve sizes
	local curve0 = (p1 - x0).magnitude;
	local curve1 = (p2 - p3).magnitude;

	-- build the world CFrames for the attachments
	local b = (x0 - p3).unit;
	local r1 = (p1 - x0).unit;
	local u1 = r1:Cross(b).unit;
	local r2 = (p2 - p3).unit;
	local u2 = r2:Cross(b).unit;
	b = u1:Cross(r1).unit;

	local cf1 = CFrame.new(
		x0.x, x0.y, x0.z,
		r1.x, u1.x, b.x,
		r1.y, u1.y, b.y,
		r1.z, u1.z, b.z
	)

	local cf2 = CFrame.new(
		p3.x, p3.y, p3.z,
		r2.x, u2.x, b.x,
		r2.y, u2.y, b.y,
		r2.z, u2.z, b.z
	)

	return curve0, -curve1, cf1, cf2;
end

local function calculateVelocity(x0, d0, t)
	local g = Vector3.new(0, -28, 0)
	local v0 = (d0 - x0 - 0.5*g*t*t)/t;
	local dir = ((x0 + v0) - x0).Unit
	local power = v0.Y / dir.Y
	return v0, dir, power
end

wait(1)
    
    local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/vFishyTurtle/wiihub/main/rayfield'))()
    
    local Window = Rayfield:CreateWindow({
        Name = "2XX Hub",
        LoadingTitle = "Loading UI",
        LoadingSubtitle = "by 2XX HUB",
        ConfigurationSaving = {
           Enabled = False,
           FolderName = Velocity, -- Create a custom folder for your hub/game
           FileName = "Velocity"
        },
        Discord = {
           Enabled = false,
           Invite = "wiigen", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
           RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        },
        KeySystem = false, -- Set this to true to use our key system
        KeySettings = {
           Title = "Velocity",
           Subtitle = "",
           Note = "Join the discord https://discord.gg/z7tHjtwz ",
           FileName = "Velocity key",
           SaveKey = false,
           GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
           Key = ""
        }
     })
     

     local Velocity hub = {
     pv = true,
     universal = 0,
     blatant = 0,
     unitoggle = true,
     blatoggle = true,
     block = true,
     blockslider = 1.5,
     AutoFollowQb = true,
     tprange = 0,
     autocatchv = 0,
    }

    function regular()
        if blatoggle == true then
            task.wait()
            local UserInputService = game:GetService("UserInputService")
            local player = game.Players.LocalPlayer
        
            local catchRight
            repeat
                catchRight = player.Character and player.Character:FindFirstChild("CatchRight")
                wait()
            until catchRight
        
            local maxDistance = 50^2
        
            local closestDist = maxDistance
            local closestFootball = nil
            local playerPos = catchRight.Position
        
            for i, v in pairs(game.workspace:GetChildren()) do
                if v.Name == "Football" and v:IsA("BasePart") then
                    local dist = (v.Position - playerPos).Magnitude
                    if dist < closestDist and dist <= blatant then
                        closestDist = dist
                        closestFootball = v
                    end
                end
            end
        
            if closestFootball then
                local steps = 30
                for i = 1, steps do
                    closestFootball.CFrame = CFrame.new(catchRight.Position + Vector3.new(1, 1, 1))
                    wait()
                end
            end
        else
            if blatoggle == false then
                blatant = 0
            end
        end        
    end

    local Tab = Window:CreateTab("Mags") -- Title, Image
    
    
-- connect to the universal variable change event
local function onUniversalChanged(newValue)
    createPart(newValue)
end

universalChangedConnection = game:GetService("RunService").Heartbeat:Connect(function()
    if universal ~= lastUniversal then
        lastUniversal = universal
        onUniversalChanged(lastUniversal)
    end
end)
    
    local Section = Tab:CreateSection("Adjustable Mags")
    
    local Toggle = Tab:CreateToggle({
        Name = "Regular",
        CurrentValue = false,
        Flag = "Togglebalgnt", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            blatoggle = Value
            if blatoggle == true then
                task.wait()
                local UserInputService = game:GetService("UserInputService")
                UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        regular()
                    end
                end)
            end
        end
    })    
    
     local Slider = Tab:CreateSlider({
       Name = "Regular Range",
       Range = {0, 60},
       Increment = 0.1,
       Suffix = "Range",
       CurrentValue = 0,
       Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
           if blatoggle == true then
           blatant = Value
           else
               if blatoggle == false then
                   blatant = 0
            end
        end
    end
    })

    
    local Tab = Window:CreateTab("Physics") -- Title, Image

    local Section = Tab:CreateSection("Predictions")
    
    local graphcolor = nil
local toggleActive = false
local eventConnection
local beamColor = Color3.fromRGB(255, 255, 255) -- Default color

local Toggle = Tab:CreateToggle({
    Name = "Football Landing Predictions",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value and not toggleActive then
            toggleActive = true
   
            local function beamProjectile(g, v0, x0, t1)
                -- calculate the bezier points
                local c = 0.5 * 0.5 * 0.5;
                local p3 = 0.5 * g * t1 * t1 + v0 * t1 + x0;
                local p2 = p3 - (g * t1 * t1 + v0 * t1) / 3;
                local p1 = (c * g * t1 * t1 + 0.5 * v0 * t1 + x0 - c * (x0 + p3)) / (3 * c) - p2;
   
                -- the curve sizes
                local curve0 = (p1 - x0).magnitude;
                local curve1 = (p2 - p3).magnitude;
   
                -- build the world CFrames for the attachments
                local b = (x0 - p3).unit;
                local r1 = (p1 - x0).unit;
                local u1 = r1:Cross(b).unit;
                local r2 = (p2 - p3).unit;
                local u2 = r2:Cross(b).unit;
                b = u1:Cross(r1).unit;
   
                local cf1 = CFrame.new(
                    x0.x, x0.y, x0.z,
                    r1.x, u1.x, b.x,
                    r1.y, u1.y, b.y,
                    r1.z, u1.z, b.z
                )
   
                local cf2 = CFrame.new(
                    p3.x, p3.y, p3.z,
                    r2.x, u2.x, b.x,
                    r2.y, u2.y, b.y,
                    r2.z, u2.z, b.z
                )
   
                return curve0, -curve1, cf1, cf2;
            end
   
            eventConnection = workspace.ChildAdded:Connect(function(b)
                if b.Name == "Football" and b:IsA("BasePart") then
                    task.wait()
                    local vel = b.Velocity
                    local pos = b.Position
                    local c0, c1, cf1, cf2 = beamProjectile(Vector3.new(0, -28, 0), vel, pos, 10)
                    local beam = Instance.new("Beam")
                    local a0 = Instance.new("Attachment")
                    local a1 = Instance.new("Attachment")
                    beam.Color = ColorSequence.new(beamColor) -- Use beamColor variable
                    beam.Transparency = NumberSequence.new(0, 0)
                    beam.Segments = 10 * 300
                    beam.CurveSize0 = c0
                    beam.CurveSize1 = c1
                    beam.Name = "Hitbox"
                    beam.Parent = workspace.Terrain
                    a0.Parent = workspace.Terrain
                    a1.Parent = workspace.Terrain
                    a0.CFrame = a0.Parent.CFrame:Inverse() * cf1
                    a1.CFrame = a1.Parent.CFrame:Inverse() * cf2
                    beam.Attachment0 = a0
                    beam.Attachment1 = a1
                    beam.Width0 = 0.5
                    beam.Width1 = 0.5
                    repeat task.wait() until b.Parent ~= workspace
                    a0:Destroy()
                    a1:Destroy()
                end
            end)
        elseif not Value and toggleActive then
            toggleActive = false
            if eventConnection then
                eventConnection:Disconnect()
            end
        end
    end
   })

local ColorPicker = Tab:CreateColorPicker({
    Name = "Beam Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "ColorPicker1",
    Callback = function(Value)
        beamColor = Value -- Update beamColor variable
    end
})

local Section = Tab:CreateSection("Guidance")

local toggleState = false -- Variable to track the toggle state

local Toggle = Tab:CreateToggle({
    Name = "Aim Predictions",
    CurrentValue = toggleState,
    Flag = "Toggle1",
    Callback = function(data)
        toggleState = data -- Update the toggle state
        
        if toggleState then
            -- Toggle turned on
            local beam = Instance.new("Beam")
            local a0 = Instance.new("Attachment")
            local a1 = Instance.new("Attachment")
            beam.Color = ColorSequence.new(beamColor)
            beam.Transparency = NumberSequence.new(0, 0)
            beam.Segments = 10 * 300
            beam.Name = "Hitbox"
            beam.Parent = workspace.Terrain
            a0.Parent = workspace.Terrain
            a1.Parent = workspace.Terrain
            beam.Attachment0 = a0
            beam.Attachment1 = a1
            beam.Width0 = 0.5
            beam.Width1 = 0.5
            while toggleState do
                task.wait()
                if player.Character:FindFirstChild("Football") and player.PlayerGui:FindFirstChild("BallGui") and player.Character:FindFirstChild("Head") then
                    local power = tonumber(player.PlayerGui.BallGui.Frame.Disp.Text)
                    local direction = (mouse.Hit.Position - workspace.CurrentCamera.CFrame.Position).Unit
                    local vel = power * direction
                    local origin = player.Character.Head.Position + direction * 5
                    local c0, c1, cf1, cf2 = beamProjectile(Vector3.new(0, -28, 0), vel, origin, 15)
                    a0.CFrame = a0.Parent.CFrame:Inverse() * cf1
                    a1.CFrame = a1.Parent.CFrame:Inverse() * cf2
                    beam.CurveSize0 = c0
                    beam.CurveSize1 = c1
                end
            end
            beam:Destroy() -- Clean up the beam when toggled off
        else
            -- Toggle turned off
            -- Add any additional code here to handle the toggle turning off
        end
    end
})






    
    local track = nil
    
     local Toggle = Tab:CreateToggle({
        Name = "Underground",
        CurrentValue = false,
        Flag = "Toggasfsle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            if Value then
                local Anim = Instance.new("Animation")
                Anim.AnimationId = "rbxassetid://182724289"
                track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
                track:Play(.1, 1, 1)
            local part = Instance.new("Part")
            part.Size = Vector3.new(500, 0.001, 500)
            part.CFrame = CFrame.new(Vector3.new(10.3562937, -1.51527438, 30.4708614))
            part.Anchored = true
            part.Parent = game.Workspace
            
            local model = game:GetService("Workspace").Models.Field.Grass
            for _, part in pairs(model:GetDescendants()) do
            if part:IsA("BasePart") then
            part.CanCollide = false
            part.Transparency = .5
            end
            end
            else 
                track:Stop()
                local model = game:GetService("Workspace").Models.Field.Grass
                for _, part in pairs(model:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0
                part.CanCollide = true
            end
                end
            end
    end
     })

     
